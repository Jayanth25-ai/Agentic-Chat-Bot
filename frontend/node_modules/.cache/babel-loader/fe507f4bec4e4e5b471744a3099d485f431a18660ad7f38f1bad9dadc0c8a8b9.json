{"ast":null,"code":"var _jsxFileName = \"D:\\\\CHAT-BOT\\\\frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(null);\nconst LS_KEY_MSGS = 'chat_msgs_v1';\nconst LS_KEY_PENDING = 'chat_pending_v1';\nconst LS_KEY_CONVERSATION_STATE = 'chat_conversation_state_v1';\nexport function ChatProvider({\n  children\n}) {\n  _s();\n  const [msgs, setMsgs] = useState([]);\n  const [pending, setPending] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [conversationState, setConversationState] = useState({\n    mood: 'neutral',\n    topic: '',\n    lastInteraction: null,\n    conversationFlow: [],\n    userPreferences: {}\n  });\n\n  // Hydrate from localStorage on mount\n  useEffect(() => {\n    try {\n      const m = localStorage.getItem(LS_KEY_MSGS);\n      const p = localStorage.getItem(LS_KEY_PENDING);\n      const c = localStorage.getItem(LS_KEY_CONVERSATION_STATE);\n      if (m) setMsgs(JSON.parse(m));\n      if (p) setPending(JSON.parse(p));\n      if (c) setConversationState(JSON.parse(c));\n    } catch (_) {}\n  }, []);\n\n  // Persist messages to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem(LS_KEY_MSGS, JSON.stringify(msgs));\n    } catch (_) {}\n  }, [msgs]);\n\n  // Persist pending state to localStorage\n  useEffect(() => {\n    try {\n      if (pending) {\n        localStorage.setItem(LS_KEY_PENDING, JSON.stringify(pending));\n      } else {\n        localStorage.removeItem(LS_KEY_PENDING);\n      }\n    } catch (_) {}\n  }, [pending]);\n\n  // Persist conversation state to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem(LS_KEY_CONVERSATION_STATE, JSON.stringify(conversationState));\n    } catch (_) {}\n  }, [conversationState]);\n\n  // Calculate unread count when messages change\n  useEffect(() => {\n    const unread = msgs.filter(msg => msg.role === 'assistant' && !msg.read).length;\n    setUnreadCount(unread);\n  }, [msgs]);\n\n  // Mark messages as read\n  const markAsRead = useCallback(() => {\n    setMsgs(prev => prev.map(msg => ({\n      ...msg,\n      read: true\n    })));\n  }, []);\n\n  // Update conversation state\n  const updateConversationState = useCallback(updates => {\n    setConversationState(prev => ({\n      ...prev,\n      ...updates,\n      lastInteraction: new Date().toISOString()\n    }));\n  }, []);\n\n  // Add message with conversation tracking\n  const addMessage = useCallback(message => {\n    setMsgs(prev => [...prev, message]);\n\n    // Update conversation state based on message\n    if (message.role === 'user') {\n      const newFlow = [...conversationState.conversationFlow, {\n        type: 'user_input',\n        content: message.content,\n        timestamp: message.timestamp\n      }];\n      updateConversationState({\n        conversationFlow: newFlow\n      });\n    }\n  }, [conversationState.conversationFlow, updateConversationState]);\n\n  // Reset chat function\n  const resetChat = useCallback(() => {\n    setMsgs([]);\n    setPending(null);\n    setError('');\n    setUnreadCount(0);\n    setConversationState({\n      mood: 'neutral',\n      topic: '',\n      lastInteraction: null,\n      conversationFlow: [],\n      userPreferences: {}\n    });\n    try {\n      localStorage.removeItem(LS_KEY_MSGS);\n      localStorage.removeItem(LS_KEY_PENDING);\n      localStorage.removeItem(LS_KEY_CONVERSATION_STATE);\n    } catch (_) {}\n  }, []);\n  const value = {\n    msgs,\n    setMsgs,\n    pending,\n    setPending,\n    loading,\n    setLoading,\n    error,\n    setError,\n    unreadCount,\n    markAsRead,\n    resetChat,\n    conversationState,\n    updateConversationState,\n    addMessage\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 10\n  }, this);\n}\n_s(ChatProvider, \"drSxP7Gt6zfqCGMsyL+/HhYly54=\");\n_c = ChatProvider;\nexport function useChat() {\n  _s2();\n  const ctx = useContext(ChatContext);\n  if (!ctx) throw new Error('useChat must be used within ChatProvider');\n  return ctx;\n}\n_s2(useChat, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","jsxDEV","_jsxDEV","ChatContext","LS_KEY_MSGS","LS_KEY_PENDING","LS_KEY_CONVERSATION_STATE","ChatProvider","children","_s","msgs","setMsgs","pending","setPending","loading","setLoading","error","setError","unreadCount","setUnreadCount","conversationState","setConversationState","mood","topic","lastInteraction","conversationFlow","userPreferences","m","localStorage","getItem","p","c","JSON","parse","_","setItem","stringify","removeItem","unread","filter","msg","role","read","length","markAsRead","prev","map","updateConversationState","updates","Date","toISOString","addMessage","message","newFlow","type","content","timestamp","resetChat","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","ctx","Error","$RefreshReg$"],"sources":["D:/CHAT-BOT/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\n\nconst ChatContext = createContext(null);\n\nconst LS_KEY_MSGS = 'chat_msgs_v1';\nconst LS_KEY_PENDING = 'chat_pending_v1';\nconst LS_KEY_CONVERSATION_STATE = 'chat_conversation_state_v1';\n\nexport function ChatProvider({ children }) {\n  const [msgs, setMsgs] = useState([]);\n  const [pending, setPending] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [conversationState, setConversationState] = useState({\n    mood: 'neutral',\n    topic: '',\n    lastInteraction: null,\n    conversationFlow: [],\n    userPreferences: {}\n  });\n\n  // Hydrate from localStorage on mount\n  useEffect(() => {\n    try {\n      const m = localStorage.getItem(LS_KEY_MSGS);\n      const p = localStorage.getItem(LS_KEY_PENDING);\n      const c = localStorage.getItem(LS_KEY_CONVERSATION_STATE);\n      if (m) setMsgs(JSON.parse(m));\n      if (p) setPending(JSON.parse(p));\n      if (c) setConversationState(JSON.parse(c));\n    } catch (_) {}\n  }, []);\n\n  // Persist messages to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem(LS_KEY_MSGS, JSON.stringify(msgs));\n    } catch (_) {}\n  }, [msgs]);\n\n  // Persist pending state to localStorage\n  useEffect(() => {\n    try {\n      if (pending) {\n        localStorage.setItem(LS_KEY_PENDING, JSON.stringify(pending));\n      } else {\n        localStorage.removeItem(LS_KEY_PENDING);\n      }\n    } catch (_) {}\n  }, [pending]);\n\n  // Persist conversation state to localStorage\n  useEffect(() => {\n    try {\n      localStorage.setItem(LS_KEY_CONVERSATION_STATE, JSON.stringify(conversationState));\n    } catch (_) {}\n  }, [conversationState]);\n\n  // Calculate unread count when messages change\n  useEffect(() => {\n    const unread = msgs.filter(msg => msg.role === 'assistant' && !msg.read).length;\n    setUnreadCount(unread);\n  }, [msgs]);\n\n  // Mark messages as read\n  const markAsRead = useCallback(() => {\n    setMsgs(prev => prev.map(msg => ({ ...msg, read: true })));\n  }, []);\n\n  // Update conversation state\n  const updateConversationState = useCallback((updates) => {\n    setConversationState(prev => ({\n      ...prev,\n      ...updates,\n      lastInteraction: new Date().toISOString()\n    }));\n  }, []);\n\n  // Add message with conversation tracking\n  const addMessage = useCallback((message) => {\n    setMsgs(prev => [...prev, message]);\n    \n    // Update conversation state based on message\n    if (message.role === 'user') {\n      const newFlow = [...conversationState.conversationFlow, {\n        type: 'user_input',\n        content: message.content,\n        timestamp: message.timestamp\n      }];\n      updateConversationState({ conversationFlow: newFlow });\n    }\n  }, [conversationState.conversationFlow, updateConversationState]);\n\n  // Reset chat function\n  const resetChat = useCallback(() => {\n    setMsgs([]);\n    setPending(null);\n    setError('');\n    setUnreadCount(0);\n    setConversationState({\n      mood: 'neutral',\n      topic: '',\n      lastInteraction: null,\n      conversationFlow: [],\n      userPreferences: {}\n    });\n    try {\n      localStorage.removeItem(LS_KEY_MSGS);\n      localStorage.removeItem(LS_KEY_PENDING);\n      localStorage.removeItem(LS_KEY_CONVERSATION_STATE);\n    } catch (_) {}\n  }, []);\n\n  const value = {\n    msgs,\n    setMsgs,\n    pending,\n    setPending,\n    loading,\n    setLoading,\n    error,\n    setError,\n    unreadCount,\n    markAsRead,\n    resetChat,\n    conversationState,\n    updateConversationState,\n    addMessage\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n}\n\nexport function useChat() {\n  const ctx = useContext(ChatContext);\n  if (!ctx) throw new Error('useChat must be used within ChatProvider');\n  return ctx;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}